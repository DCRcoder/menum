package generator

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/constant"
	"go/format"
	"go/token"
	"go/types"
	"io/ioutil"
	"log"
	"os"
	"path"
	"strings"

	"golang.org/x/tools/go/packages"
)

const stringString = `func (i %[1]s) String() string {
	return %[2]sKeyMap[i]
}`

const stringByValue = `func %[1]sByValue(key string) (%[1]s, bool) {
	v, ok := %[2]sValueMap[key]
	return v, ok
}`

type Generator struct {
	buf         bytes.Buffer
	pkg         *Package
	lineComment bool
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

func (g *Generator) Processes(fileName string) []byte {
	dir := path.Dir(fileName)
	g.parsePackage(dir)
	g.Printf("// Code generated by \"enum %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package %s", g.pkg.name)
	g.Printf("\n")
	g.Printf("\n")
	g.parseEnum()
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

func (g *Generator) parsePackage(dir string) {
	cfg := &packages.Config{
		Mode:  packages.LoadSyntax,
		Tests: false,
		Dir:   dir,
	}
	pkgs, err := packages.Load(cfg)
	if err != nil {
		log.Fatal(err)
	}
	pkg := pkgs[0]
	g.pkg = &Package{
		name:  pkg.Name,
		defs:  pkg.TypesInfo.Defs,
		files: make([]*File, len(pkg.Syntax)),
	}
	for i, file := range pkg.Syntax {
		g.pkg.files[i] = &File{
			file:        file,
			pkg:         g.pkg,
			lineComment: true,
		}
	}
}

func (g *Generator) parseEnum() {
	defineMap := make(map[string][]Value, 0)
	for _, fi := range g.pkg.files {
		if fi.file == nil {
			continue
		}
		ast.Inspect(fi.file, fi.genDecl)
		if fi.typeName == "" {
			continue
		}
		defineMap[fi.typeName] = append(defineMap[fi.typeName], fi.values...)
	}
	for k, vals := range defineMap {
		g.genEnum(k, vals)
		g.genKeyMap(k, vals)
		g.genValueMap(k, vals)
		g.genString(k)
		g.genStringMap(k)
	}
}

func (g *Generator) genEnum(k string, vals []Value) {
	// Generate code that will fail if the constants change value.
	g.Printf("\nfunc %s() {\n", formatEnumName(k))
	g.Printf("\t// An \"invalid array index\" compiler error signifies that the constant values have changed.\n")
	g.Printf("\t// Re-run the stringer command to generate them again.\n")
	g.Printf("\tvar x [1]struct{}\n")

	for _, v := range vals {
		g.Printf("\t_ = x[%s - %s]\n", v.originalName, v.str)
	}
	g.Printf("}\n")
}

func (g *Generator) genKeyMap(k string, vals []Value) {
	g.Printf("// %s Key Value Map", k)
	g.Printf("\n var %sKeyMap = map[%s]string{\n", formatEnumName(k), k)
	for _, v := range vals {
		g.Printf("\t %s : \"%s\",\n", v.originalName, v.name)
	}
	g.Printf("}\n")
}

func (g *Generator) genValueMap(k string, vals []Value) {
	g.Printf("// %s Value key Map", k)
	g.Printf("\n var %sValueMap = map[string]%s{\n", formatEnumName(k), k)
	for _, v := range vals {
		g.Printf("\t \"%s\" : %s,\n", v.name, v.originalName)
	}
	g.Printf("}\n")
}
func (g *Generator) genString(k string) {
	g.Printf("\n\n")
	g.Printf(stringString, k, formatEnumName(k))
}

func (g *Generator) genStringMap(k string) {
	g.Printf("\n\n")
	g.Printf(stringByValue, k, formatEnumName(k))
}

type Package struct {
	name  string
	defs  map[*ast.Ident]types.Object
	files []*File
}

type File struct {
	pkg  *Package  // Package to which this file belongs.
	file *ast.File // Parsed AST.
	// These fields are reset for each type being generated.
	typeName    string  // Name of the constant type.
	values      []Value // Accumulator for constant values of that type.
	lineComment bool
}

type Value struct {
	originalName string // The name of the constant.
	name         string // The name with trimmed prefix.
	// The value is stored as a bit pattern alone. The boolean tells us
	// whether to interpret it as an int64 or a uint64; the only place
	// this matters is when sorting.
	// Much of the time the str field is all we need; it is printed
	// by Value.String.
	value  uint64 // Will be converted to int64 when needed.
	signed bool   // Whether the constant is a signed type.
	str    string // The string representation given by the "go/constant" package.
}

func GeneratorFunc(fileName string, output string) error {
	g := Generator{
		lineComment: true, // 可能目前并不需要
	}
	data := g.Processes(fileName)
	err := ioutil.WriteFile(output, data, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
	return nil
}

// genDecl processes one declaration clause.
func (f *File) genDecl(node ast.Node) bool {
	decl, ok := node.(*ast.GenDecl)
	if !ok || decl.Tok != token.CONST {
		// We only care about const declarations.
		return true
	}
	typ := ""
	// Loop over the elements of the declaration. Each element is a ValueSpec:
	// a list of names possibly followed by a type, possibly followed by values.
	// If the type and value are both missing, we carry down the type (and value,
	// but the "go/types" package takes care of that).
	for _, spec := range decl.Specs {
		vspec := spec.(*ast.ValueSpec) // Guaranteed to succeed as this is CONST.
		if vspec.Type == nil && len(vspec.Values) > 0 {
			// "X = 1". With no type but a value. If the constant is untyped,
			// skip this vspec and reset the remembered type.
			typ = ""

			// If this is a simple type conversion, remember the type.
			// We don't mind if this is actually a call; a qualified call won't
			// be matched (that will be SelectorExpr, not Ident), and only unusual
			// situations will result in a function call that appears to be
			// a type conversion.
			ce, ok := vspec.Values[0].(*ast.CallExpr)
			if !ok {
				continue
			}
			id, ok := ce.Fun.(*ast.Ident)
			if !ok {
				continue
			}
			typ = id.Name
		}
		if vspec.Type != nil {
			// "X T". We have a type. Remember it.
			ident, ok := vspec.Type.(*ast.Ident)
			if !ok {
				continue
			}
			typ = ident.Name
		}
		f.typeName = typ
		// We now have a list of names (from one line of source code) all being
		// declared with the desired type.
		// Grab their names and actual values and store them in f.values.
		for _, name := range vspec.Names {
			if name.Name == "_" {
				continue
			}
			// This dance lets the type checker find the values for us. It's a
			// bit tricky: look up the object declared by the name, find its
			// types.Const, and extract its value.
			obj, ok := f.pkg.defs[name]
			if !ok {
				log.Fatalf("no value for constant %s", name)
			}
			info := obj.Type().Underlying().(*types.Basic).Info()
			if info&types.IsInteger == 0 {
				log.Fatalf("can't handle non-integer constant type %s", typ)
			}
			value := obj.(*types.Const).Val() // Guaranteed to succeed as this is CONST.
			if value.Kind() != constant.Int {
				log.Fatalf("can't happen: constant is not an integer %s", name)
			}
			i64, isInt := constant.Int64Val(value)
			u64, isUint := constant.Uint64Val(value)
			if !isInt && !isUint {
				log.Fatalf("internal error: value of %s is not an integer: %s", name, value.String())
			}
			if !isInt {
				u64 = uint64(i64)
			}
			v := Value{
				originalName: name.Name,
				value:        u64,
				signed:       info&types.IsUnsigned == 0,
				str:          value.String(),
			}
			if c := vspec.Comment; f.lineComment && c != nil && len(c.List) == 1 {
				v.name = strings.TrimSpace(c.Text())
			} else {
				v.name = strings.TrimPrefix(v.originalName, "")
			}
			f.values = append(f.values, v)
		}
	}
	return false
}

func formatEnumName(name string) string {
	return name + "Enum"
}
